1. installed laravel herd
2. installed php in herd
3. created a new laravel app

------AT THE END WE USE VITODEPLOY AS AN ALTERNATIVE TO LARAVEL FORGE--------

/\DAY 1/\
Introduction to The laravel journey. 
a. first lesson on routes: hold the links to the various views(webpages)

/\DAY 2/\
I learnt about making general layouts that can be used as a template by the blade templating engine.
$slot variable is used as a blade helper to display info in h1-h6, 
also I learnt that <?php echo $slot ?>  is just the same as {{ $slot }}. This means that the double curly braces are to echo info on the webpage.
next up: Tailwind CSS for the layout practice.

/\DAY 3/\
I built a 3-page layout.
ASSIGNMENT: create a dynamic nav-bar-link layout,
that uses one template with the {{$slot}} to display which page is active.

/\DAY 4/\
Intro to components in laravel. ($attributes). Used for templates that have attributes like in HTML (i.e. href="", id="" or even class="")
Intro to tailwind css UI.

/\DAY 5/\
How to edit sections in the template to suite the route(on both desktop and mobile).
Leanrned how to create custom {{slot}} for the template. 
The request helper function [request()->]. It is an object called to grab the info from the current request by it's attribute methods
<!-- this line is static. i.e. it can only move to the home page..
 making it dynamic we introduce the attributes of each line by our slot variable -->
<a {{ $attributes }}>{{ $slot }}</a>
Ctrl + Alt + Up to type on multiple lines
in laravel there are props and attributes:
an attribute is href, id, class etc. the prop is anything that is not an attribute
--Assignment
introduce a new prop called type which will indicate whetget the navlink should be presented as a anchor tag  or a button

/\DAY 6/\
---Solved DAY 5 assignment
Using the concepts of props to check the type of a nav-link. When set to button the nav-link now has a button tag else an anchor tag as usual
---Routing (in the routes/web.php) file
The use of the Route class with the get method to display pages, stored data for display etc. The use of arrays in keeping the data.
In routing, data can be passed a parameter in a link.

/\DAY 7/\
Making use of OOP in PHP-Laravel
The models are  classes equivalent to tables in a database. They basically contain data for use. 

/\DAY 8/\
"php artisan is Laravel’s CLI tool that helps automate tasks like migrations, seeding, creating models, clearing caches, and more. It provides many built-in commands, and all Laravel-specific commands start with php artisan to execute them in the terminal."
To see the tables, we first need to connect to our database. using our CLI or TablePlus GUI. (recommended by Jeffery Way)
The table plus is used to view all tables in our database-- make edits, add new, remove etc.
The migrations contain the tables in our database in PHP code, where we can as well do the edits we want. To reflect the changes,we need to re-run migrations.
Because the migrations are defined in PHP and can also be managed effectively, they can be worked on by other collaborators and to get an identical database, they simply need to run the "php artisan migrate" command.
--CREATING TABLES
syntax : create_'table_name'_table.php
after edit in database tables, you need to refresh it so the effect is shown.
created a new migration name 'create_job_listings_table' and populated it with data


/\DAY 9/\
Fetch data from the database and rendering on the frontend.
ELOQUENT ORM (Object Relation Mapper)
An orm maps an object(table row) to an objct in our php code (class)

Eloquent uses convention over configuration. Naming conventions are chosen over their configurations 
Eloquent automatically figures out which database table a model should use. It does this by taking the model’s name, converting it to snake case, and making it plural.

For example:

(i.e. the conventions is such that if your table name is in plural form, Eloquent changes it to singular form and also uses snake case for table names separatd by _)
A Flight model will use the flights table.
An AirTrafficController model will use the air_traffic_controllers table.
READ ON MASS ASSIGNMENTS
READ ALSO ON THE PHP ARTISAN TINKER
php artisan help command
adding the 'help' before the command gives 
practice more of querying of the database using the eloquent ORM

-practicing more on using eloquent to query our database

/\DAY 10/\
Factories 
For a case where dummy data is need to manipulate our tables in the database we can use eloquent's factory to seed(populate our database tables) our tables. A template that comes with everu new laravel app is the UserFactory
---ADDING FOREIGN KEYS 
IN MIGRATIONS(TABLE STRUCTURE DESCRIPTION) to reflect in their corresponding models where the data is represent by the column names.
For everything to work perfectly, for every 'table' there must be a corresponding model(data rep), factory(as the name suggests: a place where dummy data to suite the column description by the    library), migrations(table structure definition). Making necessary imports to the corresponding files in case of data relationship. There for multiple table connections there must be the need to relate them by a foreign key as in  a normal database.


/\DAY 11/\
Eloquent relationships. belongsto, hasMany (Example of a few of the relationship types)
The relationship method takes it's first method as the  class_name::class
Foreign keys can be explicitly declared as a second argument in our relationship method (hasOne,hasMany etc) if they do not follow the normal convention (i.e.foregin-key table_id)
also if the parent also uses a different convention from the normal one then the the relation method takes a 3rd argument called the local_variable

/\PRACTICE CONCEPTS/\
Models.
Migrations.
Factories
ELOQUENT ORM - RELATIONSHIPS, FOREIGN KEYS
--Dealing with social media logic--
Made a blog post page where each blog has a title, content and each post has comment under it
Made models, factories, migrations, post view and routes. Since every post has it's own comment, I learnt to use the with property to support the relationship(in methods) (i.e. the hasMany and belongsTo relationships)

/\DAY 12/\
Activating relationships between tables.
Learnt about the constrained method and the oncascadedelete methods that work together to enable deletion of all occurences of rows containing a specific id. For default setting in laravel doing this is activated but you'll have to activate it in sql lite
Via the SQL tab in table plus we run "PRAGMA foreign_keys=on" to activate the features for foreign keys
learnt two news stuff, 
foreignPivotKey:In a model when a method is to retrieve data, it is used when the foreign key doesn't follow the stndard default primary/ foreign key naming AND
relatedPivotKey:In a model when a method is to retrieve data, it is used when the primary doesn't follow the stndard default primary/ foreign key naming 

Assignment:
Make a post_tag pivot table //DONE

/\DAY 13/\
--The 'N+1' problem: Refers to database queries executed with a loop, rather than making a single query that loads all relevant data upfront. 
--This occurs when querying from the database is by lazy loading where each record or relevant data is queried differently so 1 query to fetch the table and N number of queries to fetch N records. This  slows down database efficiency and increasing load times for application.
--As such Eager loading is employed where the whole table data is fetched, using the with() method to fetch table related data as well. For larger number of records it is not advisable or fetch limiting can be employed
--In the service provider, we disabled the lazyloading in the boot() method using 'Model::preventLazyLoading()' differs from the 'Model::preventsLazyLoading()' that returns a boolean

/\DAY 14/\
Pagination: This comes to solve the problem of eager loading. Since in eager loading, all records are fetched, pagination (by pages) allows us to set a number of records per page, this aims at reducing work load on memory. There's also pagination links to aid go from page to page...
For pagination there are 4 methods
--paginate(n): this shows arrow buttons to move from page to page. Also there's page number set that allows jumping from one page to another without sequential movement.
--simplePaginate(n): Simple pagination only as two buttons at both ends of the page, 'Previous' and 'Next', On hovering over the link you'll see '?page=n showing the currentpage number.
--cursorPaginate(n): Like the simplePaginate(n) but in place of '?page=n', there's ?cursor=encoded value (i.e. the value of the cursor is in an encoded form). This is suitable for cases where large data sets are taken but there's no need for moving to a specific page.

2. Also in our AppServiceProvider we can change the default view framework==Tailwindcss to any other using 'Paginator::useFrameworkName();'
3. Also some packages that have been loaded through composer, can be published for manual edit
using 'php artisan vendor:publish'
 // disabled lazy loading..Using eager loading to fetch all records...Pagination to solve eager loading problem of fetching all records

/\DAY 15/\
Seeding database. In the database/seeder/DatabaseSeeder.php, the various factories for each model is called(only if set in the class file) and are populated with fake data according to the table structure set in the factories. This helps in populating the whole database in a single go. Better still, the chosen Model class to be seeded can be specified. 
using the 'php artisan db:seeder --class=SeederClassName (default = DatabaseSeeder), we can specify which table we want to fill, or no class specialisation means we are filling all the factories set in the default DatabaseSeeder class.

/\DAY 16 /\
Dealing with forms. The 'csrf' directive must be included in all laravel forms to prevent cross-site by including tokenization(i.e. every form input has a token that must be same as the token in the current session) ...Even in it's absence, laravel give an error on that page until it is placed right under the opening tag. 

/\DAY 17/\
Form validation. Making sure restrictions are placed on the various form inputs to secure the system.
This is done in the routes file(web.php) under the said post request, where input is validate even before reaching eloquent's create command

/\DAY 18/\
The full CRUD operation is complete. We use the @method('PATCH') in our form to allow updating any record and in the route file too we see Route::patch(). Also the delete route, deleting a row by id.

/\DAY 19/\ - Routes Reloaded
Routes Model Binding - It is a feature in laravel that enables less manual querying by making instances by a specified identifier..

Controller classes
They contain methods that can be called through the routes file. This containerizes the logics to be used by a model

In the routes file, the Route::view() is used for display static pages

route:list - lists all user  made routes and also routes generated by vendor

Route grouping-- Grouping routes based on the same controller name

Route Resource 
Route::resource()
first argument is the URI, second is name of the controller class, [an array of exceptions to be made(i.e. exception files, the only  files)]

The route resource is used to generate the standard CRUD operations with some other methods in the controller class file (index, create, store, show, edit, update, destroy)
This all tho can be created in the web.php file for routes, can be replace by a single Route::resource() line specifying the controller class name and other important things